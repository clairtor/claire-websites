#!/usr/bin/env python

from pathlib import Path
import subprocess
import argparse
import os


class Colors:
    PURPLE = '\033[95m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    GREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    NONE = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


def build(args):

    if not args.sites:
        sites = os.listdir("./src/sites/")
    else:
        sites = args.sites

    for site in sites:
        try:
            config_path = Path(f"./src/sites/{site}/config")
            print(config_path)
            if not config_path.exists():
                raise Exception("Site does not exist.")
            else:
                command = subprocess.run(["hugo", "--environment claire-websites", f"--configDir sites/{site}/config"],
                                         stdout=subprocess.PIPE,
                                         stderr=subprocess.PIPE,
                                         text=True,
                                         shell=False,
                                         cwd="./src")
        except Exception as err:
            print(Colors.FAIL + "Error building site " +
                  Colors.PURPLE + site + Colors.NONE + "\n")
            print("\t" + err.__str__() + "\n")
        else:
            print(Colors.GREEN + "Building site " +
                  Colors.PURPLE + site + Colors.NONE + "\n")
            for line in command.stdout.splitlines():
                print(f"\t{line}")
            print('')


def deploy():
    print(Colors.GREEN +
          "Deploying all currently built sites " + Colors.NONE + "\n")
    command = subprocess.run(["rsync", "-vr", "./public/", "claire@71.19.144.253:/home/claire/containers/caddy/sites/"],
                             stdout=subprocess.PIPE,
                             stderr=subprocess.PIPE,
                             text=True)
    for line in command.stdout.splitlines():
        print(f"\t{line}")
    print('')


def main():
    print(Colors.BOLD + "web-precence" + Colors.NONE + "\n")

    # Create the parser object
    parser = argparse.ArgumentParser(
        description="Helper functions for the web-presence hugo repository",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )

    # Create the subparsers for our script
    subparsers = parser.add_subparsers(dest="command")

    # Create the build subparser
    build_subparser = subparsers.add_parser(
        "build", help="Build some or all of the sites")
    build_subparser.add_argument(
        "sites", nargs="*", type=str, help="site(s) to build")

    # Create the deploy subparser
    deploy_subparser = subparsers.add_parser(
        "deploy", help="Deploy some or all of the sites to a target")

    # Create the push subparser
    push_subparser = subparsers.add_parser(
        "push", help="Builds all sites and publishes them")
    push_subparser.add_argument(
        "sites", nargs="*", type=str, help="site(s) to build")

    # Parse the arguments
    args = parser.parse_args()

    # Perform actions accordingly based on chosen subcommand
    if args.command == "build":
        build(args)
    elif args.command == "deploy":
        deploy()
    elif args.command == "push":
        print(Colors.PURPLE +
              "Doing all the things! " + Colors.NONE + "\n")
        build()
        deploy()
    else:
        parser.print_help()


if __name__ == "__main__":
    main()
